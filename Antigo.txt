        System.out.println("################### Primeira Rainha: ");
        inserirRainha(q1, matrizPosicoes);
        lerTabuleiro(matrizPosicoes);
        
        System.out.println("################### Colocando Linhas Colunas e Diagonais");
        
        verificaColuna(q1);
        verificaLinha(q1);
        verificaDiagonal1(q1);
        verificaDiagonal2(q1);
              
        lerTabuleiro(matrizPosicoes);
        
        System.out.println("################### Coloca 2 no antigo lugar de q1 #########################");
        
        apagaQueenTabuleiro(q1);
        
        
        System.out.println("################## Troca matrizPosicoes por matrizTemp #########################");
        copiarMatriz(matrizTemp, matrizPosicoes);
        lerTabuleiro(matrizPosicoes);
        System.out.println("FIM-TEMP2");
        
        System.out.println("##################lerTabuleiro(matrizPosicoes);#########################");
        lerTabuleiro(matrizPosicoes);
        System.out.println("#################FIM###lerTabuleiro(matrizPosicoes);#######################");
        
        inserirRainha(q1, matrizPosicoes);
        
        lerTabuleiro(matrizPosicoes);
        
        
        System.out.println("###########################################");
        
        

        
        

        System.out.println("Segunda Rainha: ");
        inserirRainha(bruno, matrizTemp);
        lerTabuleiro(matrizPosicoes);
        verificaColuna(bruno);
        verificaLinha(bruno);
        verificaDiagonal1(bruno);
        verificaDiagonal2(bruno);

        System.out.println("Terceira Rainha: ");
        lerTabuleiro(matrizPosicoes);
        inserirRainha(miguel, matrizTemp);
        System.out.println();
        lerTabuleiro(matrizPosicoes);













//        int l = 0;
//        int c = 0;
//
//        try {
//            for(c = 0; c < matriz.length; c++){
//                if (matriz[l][c] != 0 && c <= matriz.length) {
//                    for(l = 0; l < matriz.length; ) {
//                        if (matriz[l][c] != 0 && c <= matriz.length) {
//                            l++; 
//                        }
//                        q.setLinha(l);
//                        q.setColuna(c);
//                        matriz[l][c] = 1;
//                    }
//                    c++;
//                }
//                q.setLinha(l);
//                q.setColuna(c);
//                matriz[l][c] = 1;
//            }
//        
// 
//            
//            q.setLinha(l);
//            q.setColuna(c);
//            matriz[l][c] = 1;
//
//        } catch (ArrayIndexOutOfBoundsException e) {
//            verAnterior(c);
//            System.out.println("ERROU");
//        }



for(int i=0; i<100; i++)
{
    if(user entered invalid value)
        break; // breaks out of the for loop
}


 public int[][] ComunicaPosicoes(){
        int c = this.getColuna() + 1;
        
        for(int l = 0; l < this.colunaAntiga.length; l++){
            if (colunaAntiga[l][c] == 0){
                
            }
        }
        return posicoesVazias;
    }




public static void inserirRainha2(Queen q, int matriz[][]) {
        int l = 0;
        int c = 0;

        try {
            for(c = 0; c < matriz.length; c++){
                if (matriz[l][c] != 0 && c <= matriz.length) {
                    for(l = 0; l < matriz.length; ) {
                        if (matriz[l][c] != 0 && c <= matriz.length) {
                            l++; 
                        }
                        q.setLinha(l);
                        q.setColuna(c);
                        matriz[l][c] = 1;
                    }
                    c++;
                }
                q.setLinha(l);
                q.setColuna(c);
                matriz[l][c] = 1;
            }
        
 
            
            q.setLinha(l);
            q.setColuna(c);
            matriz[l][c] = 1;

        } catch (ArrayIndexOutOfBoundsException e) {
            verAnterior(c);
            System.out.println("ERROU");
        }

    }

    public static void copiarTabuleiro(int a[][], int b[][]){
        b = a.clone();
        lerTabuleiro(b);
    }

    public static void verAnterior(int c) {
        for (int l = 0; l < matrizPosicoes.length; l++) {
            if(matrizPosicoes[l][c] == 1){
                System.out.println("L= " + l + " C = " + c);
            }
        }
    }

    public static void zeraTabuleiro() {
        System.out.println();
        for (int m = 0; m < matrizPosicoes.length; m++) {
            for (int b = 0; b < matrizPosicoes[0].length; b++) {
                System.out.print(" " + matrizPosicoes[m][b]);
                matrizPosicoes[m][b] = 0;

            }
            System.out.println();
        }
    }


    public static void verVazios() {
        for (int c = 0; c < matrizPosicoes.length; c++) {
            for (int l = 0; l < matrizPosicoes.length; l++) {
                if (matrizPosicoes[l][c] == 0) {
                    //System.out.println("L= " + l + " C = " + c);
                    //mVazios[c][l] = l;
                }
            }
            System.out.println("");
        }
    }